Build a responsive and well-structured React dashboard frontend using Create React App (do not use Vite). Follow modern best practices and a modular architecture.

🎯 Project Requirements:
Use React with Create React App.

Follow this folder structure:

php
Copy
Edit
src/
├── assets/         # Static resources (e.g., images, icons)
├── components/     # Reusable components (Sidebar, Header, Buttons, etc.)
├── pages/          # Route-based dashboard pages (e.g., Migrations, Estimates)
├── services/       # Axios-based services for API Gateway communication
├── App.js
└── index.js
public/             # Public files like index.html, favicon, etc.
📌 Dashboard Layout:
Implement a responsive layout with:

A left sidebar menu with the following navigation links:

Migrations

Estimates

Connections

Settings

A top header (can be minimal or reused across pages).

Main content area should change based on the selected menu option using React Router.

🧩 Page Requirements:
🔁 Migrations Page
Contains a button labeled "Start New Migration".

When clicked, navigates to a "New Migration" page with 3 main blocks:

Source Connection: dropdown or selection to choose the origin system.

Destination Platform: dropdown to select the target system.

Migration Type Options: radio buttons or cards to choose between:

Quick Sample

Customize Migration

⚙️ Settings Page
Displays the current user's name and email address.

📊 Estimates Page
Has a button that navigates to a new page or modal with:

A "How it works" section.

A step-by-step guide showing the process to generate or request a migration estimate.

🔌 Connections Page
Placeholder for showing existing connections or managing platforms.

💅 Styling:
Use Tailwind CSS for styling (set it up with CRA).

Maintain a light theme, responsive design, and clean UI.

🔌 Services Layer:
In src/services, define mock Axios services such as:

getUserProfile()

getAvailableConnections()

submitMigrationRequest()

✅ The final result should be a ready-to-run React dashboard app using npm install && npm start, with all routing and component structure implemented.